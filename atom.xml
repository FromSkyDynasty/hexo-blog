<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心有猛虎，细嗅蔷薇</title>
  
  <subtitle>既然选择了远方，便只顾风雨兼程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.leesj.com/"/>
  <updated>2017-10-25T05:03:50.487Z</updated>
  <id>http://www.leesj.com/</id>
  
  <author>
    <name>FromSkyDynasty</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React学习笔记 -- 父子组件的通信</title>
    <link href="http://www.leesj.com/archives/react-parent-children-connection.html"/>
    <id>http://www.leesj.com/archives/react-parent-children-connection.html</id>
    <published>2017-06-23T19:21:46.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的章节中我们学习了如何在组件中管理自身的状态，那么问题来了！在实际的开发环境中不可能只有一个组件，那么组件之间进行通信就很关键了，如何通信？我们今天来学习父子组件间的通信！<br><a id="more"></a><br>在React关于Component<a href="https://facebook.github.io/react/docs/react-component.html#the-component-lifecycle" target="_blank" rel="external">生命周期</a>的介绍中，在Updating中有<strong>componentWillReceiveProps</strong>这样一个状态,它的介绍如下</p><blockquote><p>componentWillReceiveProps() is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare this.props and nextProps and perform state transitions using this.setState() in this method.</p></blockquote><p>大概的意思就是已经处于Mounted状态的组件在收到新的属性（props）之前的时候会调用componentWillReceiveProps这个方法，如果你需要改变状态去响应属性的变化，你可能要比较当前的props和改变的props然后使用在这个方法中使用setState去改变状态。</p><p>需要注意的是如果shouldComponentUpdate返回了false,componentWillReceiveProps、render和componentDidMount方法将不会执行</p><p>下面看例子：</p><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      parentText:<span class="string">'父组件的初始状态'</span>,</div><div class="line">      childText:<span class="string">'子组件的初始状态'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.handleParentButtonClick = <span class="keyword">this</span>.handleParentButtonClick.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.handleChildButtonClick = <span class="keyword">this</span>.handleChildButtonClick.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 父组件的按钮点击,改变子组件label的值</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  handleParentButtonClick()&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      childText:<span class="string">'父组件按钮点击，子组件label值改变'</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 子组件的按钮点击，改变父组件label的值</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  handleChildButtonClick()&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      parentText:<span class="string">'子组件按钮点击，父组件label值改变'</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      &lt;p&gt;</div><div class="line">        &lt;label&gt;&#123;this.state.parentText&#125;&lt;/label&gt;</div><div class="line">        &lt;button onClick=&#123;this.handleParentButtonClick&#125;&gt;父组件按钮点击&lt;/button&gt;</div><div class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">      &lt;Child text=&#123;this.state.childText&#125; handleClick=&#123;this.handleChildButtonClick&#125;  /&gt;</div><div class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></div><div class="line"><span class="xml">  &#125;</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.handleChildClick = <span class="keyword">this</span>.handleChildClick.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChildClick()&#123;</div><div class="line">    <span class="keyword">this</span>.props.handleClick();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;this.props.text&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleChildClick&#125;</span>&gt;</span>子组件按钮点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.propTypes = &#123;</div><div class="line">  handleClick:React.PropTypes.func,</div><div class="line">  text:React.PropTypes.string</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>效果是子组件的按钮点击，父组件的label值改变，父组件的按钮点击，子组件的label改变。这里的关键就是当Child组件的props改变时会重新渲染，子组件的按钮点击实际上调用的是父组件里的方法，即直接改变父组件的状态。<br>#<br>演示地址：<a href="http://codepen.io/lisijie/pen/KNjLBj" target="_blank" rel="external">http://codepen.io/lisijie/pen/KNjLBj</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前面的章节中我们学习了如何在组件中管理自身的状态，那么问题来了！在实际的开发环境中不可能只有一个组件，那么组件之间进行通信就很关键了，如何通信？我们今天来学习父子组件间的通信！&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leesj.com/categories/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/categories/javascript/react/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/tags/react/"/>
    
      <category term="jsx" scheme="http://www.leesj.com/tags/jsx/"/>
    
      <category term="react类" scheme="http://www.leesj.com/tags/react%E7%B1%BB/"/>
    
      <category term="react 生命周期" scheme="http://www.leesj.com/tags/react-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
      <category term="渲染" scheme="http://www.leesj.com/tags/%E6%B8%B2%E6%9F%93/"/>
    
      <category term="组件间的通讯" scheme="http://www.leesj.com/tags/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E8%AE%AF/"/>
    
      <category term="Parent &amp; Children" scheme="http://www.leesj.com/tags/Parent-Children/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记 -- 按条件渲染页面(conditional-rendering)</title>
    <link href="http://www.leesj.com/archives/react-condition-rendering.html"/>
    <id>http://www.leesj.com/archives/react-condition-rendering.html</id>
    <published>2017-06-23T19:20:31.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>按条件渲染即指根据不同的条件显示不同的内容,就像下面的例子:<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userGreet = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome back!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line"><span class="keyword">var</span> guestGreet = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Please login First.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greet</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> isLogin = props.isLogin;</div><div class="line">    <span class="keyword">if</span> (isLogin) &#123;</div><div class="line">        <span class="keyword">return</span> userGreet;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> guestGreet;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">        &lt;Greet isLogin=&#123;<span class="literal">false</span>&#125;/&gt;,</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'demo7'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p><p>当isLogin为true的时候显示”Welcome back”,false时显示”Plese Login First”,下面的例子通过点击登录、登出按钮模拟不同的isLogin状态下显示的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginButton</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">            &lt;button onClick=&#123;props.onClick&#125;&gt;登录&lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">function LogoutButton(props) &#123;</span></div><div class="line"><span class="regexp">    return (</span></div><div class="line"><span class="regexp">            &lt;button onClick=&#123;props.onClick&#125;&gt;登出&lt;/</span>button&gt;</div><div class="line">    );</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.loginClick = <span class="keyword">this</span>.loginClick.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.logoutClick = <span class="keyword">this</span>.logoutClick.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">isLogin</span>: <span class="literal">false</span>&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    loginClick() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            isLogin: <span class="literal">true</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    logoutClick() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            isLogin: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> isLogin = <span class="keyword">this</span>.state.isLogin;</div><div class="line">        <span class="keyword">let</span> button = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span> (isLogin) &#123;</div><div class="line">            button = <span class="xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.logoutClick&#125;/</span>&gt;</span></span></div><div class="line"><span class="xml">        &#125; else &#123;</span></div><div class="line">            button = &lt;LoginButton onClick=&#123;this.loginClick&#125;/&gt;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return &lt;div&gt;</div><div class="line">            &lt;Greet isLogin=&#123;isLogin&#125;/&gt;</div><div class="line">            &#123;button&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在render方法中首先获取当前的登录状态，根据isLogin输出不同文字和不同的按钮。</p><p><img src="http://og1q3elcx.bkt.clouddn.com/react/demo7/should-login.png" alt=""><br><img src="http://og1q3elcx.bkt.clouddn.com/react/demo7/logout.png" alt=""></p><p>在判断的时候可以使用JSX的逻辑运算符<strong>&amp;&amp;</strong>，类似isLogin&amp;&amp;doSomething(),也可使用条件表达式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;isLogin?(&lt;LoginButton onClick=&#123;this.loginClick&#125;/&gt;):(&lt;LoginButton onClick=&#123;this.loginClick&#125;/&gt;)&#125;;</div></pre></td></tr></table></figure></p><h3 id="通过条件阻止组件的渲染"><a href="#通过条件阻止组件的渲染" class="headerlink" title="通过条件阻止组件的渲染"></a>通过条件阻止组件的渲染</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!props.warning) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Warning!!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.showWarning = <span class="keyword">this</span>.showWarning.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            isShow: <span class="literal">false</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    showWarning() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">prev</span>=&gt;</span> (&#123;</div><div class="line">            isShow:!prev.isShow</div><div class="line">        &#125;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                    &lt;WarningBanner warning=&#123;this.state.isShow&#125;/&gt;</div><div class="line">                    &lt;button onClick=&#123;this.showWarning&#125;&gt;</div><div class="line">                        &#123;this.state.isShow ? "hide" : "show"&#125;</div><div class="line">                    &lt;/button&gt;</div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">        );</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">&#125;</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">ReactDOM.render(</span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Page</span> /&gt;</span>,</span></div><div class="line"><span class="xml">        document.getElementById('demo7')</span></div><div class="line"><span class="xml">);</span></div></pre></td></tr></table></figure><p>通过点击show/hide按钮显示和隐藏WarningBanner</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按条件渲染即指根据不同的条件显示不同的内容,就像下面的例子:&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leesj.com/categories/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/categories/javascript/react/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/tags/react/"/>
    
      <category term="jsx" scheme="http://www.leesj.com/tags/jsx/"/>
    
      <category term="react类" scheme="http://www.leesj.com/tags/react%E7%B1%BB/"/>
    
      <category term="react 生命周期" scheme="http://www.leesj.com/tags/react-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
      <category term="渲染" scheme="http://www.leesj.com/tags/%E6%B8%B2%E6%9F%93/"/>
    
      <category term="按条件渲染" scheme="http://www.leesj.com/tags/%E6%8C%89%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>React学习 -- 类(Class)</title>
    <link href="http://www.leesj.com/archives/react-class.html"/>
    <id>http://www.leesj.com/archives/react-class.html</id>
    <published>2017-06-23T19:15:52.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类-即组件-component-可以重复使用的部分"><a href="#类-即组件-component-可以重复使用的部分" class="headerlink" title="类,即组件(component),可以重复使用的部分"></a>类,即组件(component),可以重复使用的部分</h3><p>React使用createClass来创建类,下面是示例<br><a id="more"></a></p><h3 id="step1-创建空的类"><a href="#step1-创建空的类" class="headerlink" title="step1:创建空的类"></a>step1:创建空的类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstClass = React.createClass(&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>在浏览器中运行将会报如下错误:<br><img src="http://og1q3elcx.bkt.clouddn.com/react/react_demo3_render_error.png" alt=""><br>意思就是创建类必须实现render方法</p><h3 id="step2-实现render方法"><a href="#step2-实现render方法" class="headerlink" title="step2:实现render方法"></a>step2:实现render方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstClass = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is first components!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>运行正常</p><h3 id="step3-使用组件"><a href="#step3-使用组件" class="headerlink" title="step3:使用组件"></a>step3:使用组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstClass = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is first components!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;firstClass/&gt;,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'demo3'</span>)</div><div class="line">);</div></pre></td></tr></table></figure><p>运行后未报错,也没有显示预期的结果</p><h3 id="step4-将firstClass改为FirstClass"><a href="#step4-将firstClass改为FirstClass" class="headerlink" title="step4:将firstClass改为FirstClass"></a>step4:将firstClass改为FirstClass</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> FirstClass = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is first components!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">     &lt;FirstClass /&gt;,</div><div class="line">     <span class="built_in">document</span>.getElementById(<span class="string">'demo3'</span>)</div><div class="line">);</div></pre></td></tr></table></figure><p>运行成功,下面是运行结果:</p><p><img src="http://og1q3elcx.bkt.clouddn.com/react/react_demo3_success.png" alt=""></p><p>原因:React 的 JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。render渲染时，会把大写的组件名定义为自定义组件，把小写的组件名定义为HTML自带的标签名进行渲染。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类-即组件-component-可以重复使用的部分&quot;&gt;&lt;a href=&quot;#类-即组件-component-可以重复使用的部分&quot; class=&quot;headerlink&quot; title=&quot;类,即组件(component),可以重复使用的部分&quot;&gt;&lt;/a&gt;类,即组件(component),可以重复使用的部分&lt;/h3&gt;&lt;p&gt;React使用createClass来创建类,下面是示例&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leesj.com/categories/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/categories/javascript/react/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/tags/react/"/>
    
      <category term="jsx" scheme="http://www.leesj.com/tags/jsx/"/>
    
      <category term="react类" scheme="http://www.leesj.com/tags/react%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记 -- 状态和生命周期(State and Lifecycle)</title>
    <link href="http://www.leesj.com/archives/react-lifecycle.html"/>
    <id>http://www.leesj.com/archives/react-lifecycle.html</id>
    <published>2017-06-23T19:15:52.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="尝试使用前面所学的知识去更新UI-大致代码如下"><a href="#尝试使用前面所学的知识去更新UI-大致代码如下" class="headerlink" title="尝试使用前面所学的知识去更新UI,大致代码如下:"></a>尝试使用前面所学的知识去更新UI,大致代码如下:</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showNow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> element = (</div><div class="line">        &lt;div&gt;</div><div class="line">           现在时间是:&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()&#125;</div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">    ReactDOM.render(</span></div><div class="line"><span class="regexp">        element,</span></div><div class="line"><span class="regexp">        document.getElementById('demo5')</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">setInterval(showNow, 1000);</span></div></pre></td></tr></table></figure><p>那么每隔一秒就会去刷新当前的时间</p><h3 id="如果我们要让其自动更新时间-而不必去调用setInterval来循环刷新-就用到了state"><a href="#如果我们要让其自动更新时间-而不必去调用setInterval来循环刷新-就用到了state" class="headerlink" title="如果我们要让其自动更新时间,而不必去调用setInterval来循环刷新,就用到了state"></a>如果我们要让其自动更新时间,而不必去调用setInterval来循环刷新,就用到了state</h3><blockquote><p>state与props类似,但state是组件私有的,由组件全权控制</p></blockquote><p>要实现自动更新,就要将showNow由函数改为组件,并且这个组件继承与React.Component,而且这个类要<strong>实现render方法</strong>,<strong>拥有一个构造器</strong>.(是不是与java的类很相似呢!!)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">            现在时间是:&#123;this.state.date.toLocaleTimeString()&#125;</span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Clock/&gt;,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'demo5'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p><p>运行后,显示了当前时间,但并没有更新时间,原因是只是给了状态,并没有实现定时更新,也就是下面要说的生命周期:</p><blockquote><p><strong>componentDidMount</strong>表示组件已经输出到DOM<br><strong>componentWillUnmount</strong>表示组件任务完成,即将解除”安装”</p></blockquote><p>据此,在componentDidMount中启动定时器,然后在componentWillUnmount中结束定时器,将Clock改为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">            现在时间是:&#123;this.state.date.toLocaleTimeString()&#125;</span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    showNow() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">this</span>.timer = setInterval(</div><div class="line">                ()=&gt;<span class="keyword">this</span>.showNow(),</div><div class="line">        <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行结果:每隔一秒就会去刷新当前的时间</p><p>在<a href="https://facebook.github.io/react/docs/state-and-lifecycle.html" target="_blank" rel="external">官方文档</a>中需要注意一个地方:</p><p>不要直接去使用this.state.date=something去直接更新state,因为this.props和this.state可能是异步更新的，你不应该依赖它们的值来计算下一个状态。应该使用<strong>setState()</strong>去更新状态</p><h3 id="这些内容很复杂-还得花些时间去消化"><a href="#这些内容很复杂-还得花些时间去消化" class="headerlink" title="这些内容很复杂,还得花些时间去消化!!!"></a>这些内容很复杂,还得花些时间去消化!!!</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;尝试使用前面所学的知识去更新UI-大致代码如下&quot;&gt;&lt;a href=&quot;#尝试使用前面所学的知识去更新UI-大致代码如下&quot; class=&quot;headerlink&quot; title=&quot;尝试使用前面所学的知识去更新UI,大致代码如下:&quot;&gt;&lt;/a&gt;尝试使用前面所学的知识去更新UI,大致代码如下:&lt;/h3&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leesj.com/categories/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/categories/javascript/react/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/tags/react/"/>
    
      <category term="jsx" scheme="http://www.leesj.com/tags/jsx/"/>
    
      <category term="react类" scheme="http://www.leesj.com/tags/react%E7%B1%BB/"/>
    
      <category term="react 生命周期" scheme="http://www.leesj.com/tags/react-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
      <category term="组件" scheme="http://www.leesj.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记 -- 属性(props)</title>
    <link href="http://www.leesj.com/archives/react-prop-types.html"/>
    <id>http://www.leesj.com/archives/react-prop-types.html</id>
    <published>2017-06-23T19:15:52.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PropTypes是用于验证props的属性类型"><a href="#PropTypes是用于验证props的属性类型" class="headerlink" title="PropTypes是用于验证props的属性类型"></a>PropTypes是用于验证props的属性类型</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo5Class = React.createClass(&#123;</div><div class="line">    propTypes: &#123;</div><div class="line">        name: React.PropTypes.string.isRequired</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="string">"123"</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Demo5Class name=&#123;num&#125;/&gt;,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo5"</span>)</div><div class="line">);</div></pre></td></tr></table></figure><hr><p>将num改为数字再试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</div></pre></td></tr></table></figure></p><p>也会正常运行,但在控制台上将会显示如下警告:<br><img src="http://og1q3elcx.bkt.clouddn.com/react/type_error_warning.png" alt=""></p><p>设置默认的属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo5Class = React.createClass(&#123;</div><div class="line">    propTypes: &#123;</div><div class="line">        name: React.PropTypes.string.isRequired</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">    &#125;,</div><div class="line">    getDefaultProps: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            name: <span class="string">"My name is Default"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Demo5Class /&gt;,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo5"</span>)</div><div class="line">);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PropTypes是用于验证props的属性类型&quot;&gt;&lt;a href=&quot;#PropTypes是用于验证props的属性类型&quot; class=&quot;headerlink&quot; title=&quot;PropTypes是用于验证props的属性类型&quot;&gt;&lt;/a&gt;PropTypes是用于验证props的属性类型&lt;/h2&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leesj.com/categories/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/categories/javascript/react/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/tags/react/"/>
    
      <category term="jsx" scheme="http://www.leesj.com/tags/jsx/"/>
    
      <category term="react类" scheme="http://www.leesj.com/tags/react%E7%B1%BB/"/>
    
      <category term="propTypes" scheme="http://www.leesj.com/tags/propTypes/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记 -- 属性(props)</title>
    <link href="http://www.leesj.com/archives/react-props.html"/>
    <id>http://www.leesj.com/archives/react-props.html</id>
    <published>2017-06-23T19:15:52.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>属性作用于组件上,属性名可以为任意字符串,下面看例子<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo4Class = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Demo4Class name=<span class="string">"Jack"</span>/&gt;,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo4"</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p><p>运行结果:<br><img src="http://og1q3elcx.bkt.clouddn.com/react/simple-result.png" alt=""></p><h3 id="特殊props"><a href="#特殊props" class="headerlink" title="特殊props"></a>特殊props</h3><h3 id="1-children"><a href="#1-children" class="headerlink" title="1.children"></a>1.children</h3><blockquote><p>children是props中的一个特殊属性,表示组件的子节点,下面是例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo4Class = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml">            &#123;</span></div><div class="line"><span class="xml">                React.Children.map(this.props.children, function (child) &#123;</span></div><div class="line"><span class="xml">                    return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml">                &#125;)</span></div><div class="line"><span class="xml">            &#125;</span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">        &lt;Demo4Class&gt;</div><div class="line">            &lt;span&gt;Hello,Jack!<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">            &lt;span&gt;Hello,Lily!<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">            &lt;span&gt;Hello,Tiger!<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">        &lt;<span class="regexp">/Demo4Class&gt;,</span></div><div class="line"><span class="regexp">        document.getElementById("demo4")</span></div><div class="line"><span class="regexp">);</span></div></pre></td></tr></table></figure></p></blockquote><p>运行结果:<br><img src="http://og1q3elcx.bkt.clouddn.com/react/props-children-result.png" alt=""></p><blockquote><p>尝试使用children作为普通属性使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo4Class = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    &lt;Demo4Class children=<span class="string">"Jack"</span>/&gt;,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo4"</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p></blockquote><p>无异常,且正常运行,但是建议在开发中不要使用children作为普通属性,以免混淆</p><h3 id="2-js保留关键字class-for"><a href="#2-js保留关键字class-for" class="headerlink" title="2.js保留关键字class,for"></a>2.js保留关键字class,for</h3><blockquote><p>若作为普通属性,也可正常运行,但也不建议使用这两个甚至于其他html标签的一些属性</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;属性作用于组件上,属性名可以为任意字符串,下面看例子&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leesj.com/categories/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/categories/javascript/react/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/tags/react/"/>
    
      <category term="jsx" scheme="http://www.leesj.com/tags/jsx/"/>
    
      <category term="react类" scheme="http://www.leesj.com/tags/react%E7%B1%BB/"/>
    
      <category term="props" scheme="http://www.leesj.com/tags/props/"/>
    
  </entry>
  
  <entry>
    <title>React学习 - JSX语法(js与html混写)</title>
    <link href="http://www.leesj.com/archives/react-jsx.html"/>
    <id>http://www.leesj.com/archives/react-jsx.html</id>
    <published>2017-06-23T19:12:34.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>在React中,script的type属性为text/babel,与之前写的text/javascript不同,这个就是JSX,下面看代码<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React第二弹<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">/** example1 **/</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">"Tom"</span>, <span class="string">"Lily"</span>];</span></div><div class="line"><span class="undefined">    ReactDOM.render(</span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">                &#123;</span></div><div class="line"><span class="javascript">                    names.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="comment">// 1.return "name:" + item;</span></span></div><div class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>name:&#123;item&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></div><div class="line"><span class="undefined">                    &#125;)</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</span></div><div class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'demo2'</span>)</span></div><div class="line"><span class="undefined">    );</span></div><div class="line"><span class="javascript">    <span class="comment">/** example2 **/</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> doms = [</span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>name:Alice<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>name:Tom<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>name:Lily<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="undefined">    ];</span></div><div class="line"><span class="undefined">    ReactDOM.render(</span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;doms&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</span></div><div class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'demo2'</span>)</span></div><div class="line"><span class="undefined">    );</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">/** example3 **/</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> json = &#123;</span></div><div class="line"><span class="javascript">        <span class="string">"demo1"</span>:<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span></div><div class="line"><span class="javascript">        <span class="string">"demo2"</span>:<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSX语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    ReactDOM.render(</span></div><div class="line"><span class="undefined">            &#123;json&#125;,</span></div><div class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'demo2'</span>)</span></div><div class="line"><span class="undefined">    );</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="example1"><a href="#example1" class="headerlink" title="example1 :"></a>example1 :</h3><p>例子一中预先定义了普通的JS数组,然后在div块中循环输出,结果如下:</p><p><img src="http://og1q3elcx.bkt.clouddn.com/reactreact-demo2-result.png" alt=""></p><h3 id="example2"><a href="#example2" class="headerlink" title="example2:"></a>example2:</h3><p>例子二中的数组采用JSX定义,然后通过{doms}调用,react内部循环处理,结果与<br>example1相同</p><h3 id="example3"><a href="#example3" class="headerlink" title="example3"></a>example3</h3><p>例子三定义了一个JSX形式的json数据,仿example2进行输出,结果得到如下错误:</p><p><img src="http://og1q3elcx.bkt.clouddn.com/reactreact-json-error.png" alt=""></p><p>错误的大概意思就是”对象不是一个有效的react节点,如果想渲染一个集合,用数组替换或者用createFragment创建”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在React中,script的type属性为text/babel,与之前写的text/javascript不同,这个就是JSX,下面看代码&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leesj.com/categories/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/categories/javascript/react/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="react" scheme="http://www.leesj.com/tags/react/"/>
    
      <category term="jsx" scheme="http://www.leesj.com/tags/jsx/"/>
    
  </entry>
  
  <entry>
    <title>javascript使用正则表达式获取路径中的参数</title>
    <link href="http://www.leesj.com/archives/js-split-url-params.html"/>
    <id>http://www.leesj.com/archives/js-split-url-params.html</id>
    <published>2017-06-23T19:00:12.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>路径中的参数格式为key1=value1&amp;key2=value2…使用?跟在请求路径上,那么获取参数就可以这样:<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">    url = url.split(<span class="string">'?'</span>)[<span class="number">1</span>];</div><div class="line">    <span class="keyword">var</span> pairs = url.split(<span class="string">'&amp;'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;pairs.length;i++)&#123;</div><div class="line">        <span class="keyword">var</span> pair = pairs[i];</div><div class="line">        <span class="keyword">var</span> values = pair.split(<span class="string">'='</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'key='</span>+values[<span class="number">0</span>] + <span class="string">',value='</span>+values[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>但是不仅用起来麻烦,而且处理起特殊的url有误,使用正则表达式则会避免这些</p><h3 id="获取单个参数"><a href="#获取单个参数" class="headerlink" title="获取单个参数"></a>获取单个参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @param name 要取参数的key</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</div><div class="line">    <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</div><div class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取全部参数"><a href="#获取全部参数" class="headerlink" title="获取全部参数"></a>获取全部参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var params = &#123;&#125;;</div><div class="line">function getUrlParams(url) &#123;</div><div class="line">    var queryRegExp = new RegExp(&apos;([\\?|&amp;])(.+?)=([^&amp;?]*)&apos;, &apos;ig&apos;);</div><div class="line">    var result = queryRegExp.exec(url);</div><div class="line">    while (result) &#123;</div><div class="line">        console.log(result);</div><div class="line">        params[result[2]] = result[3];</div><div class="line">        result = queryRegExp.exec(url);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在queryRegExp中’ig’的含义为不区分大小写,匹配全部<br>为什么选取result[2]和result[3],看result在控制台中的结果:</p><p><img src="http://og1q3elcx.bkt.clouddn.com/javacript/js-get-url-params.png" alt=""></p><p>参考链接:</p><ol><li><a href="http://www.netingcn.com/url-get-parameter-value.html" target="_blank" rel="external">http://www.netingcn.com/url-get-parameter-value.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;路径中的参数格式为key1=value1&amp;amp;key2=value2…使用?跟在请求路径上,那么获取参数就可以这样:&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leesj.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="正则表达式" scheme="http://www.leesj.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="获取url的参数" scheme="http://www.leesj.com/tags/%E8%8E%B7%E5%8F%96url%E7%9A%84%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>生成简单的图形验证码（下）--  在页面中展示验证码</title>
    <link href="http://www.leesj.com/archives/simple-captcha-display.html"/>
    <id>http://www.leesj.com/archives/simple-captcha-display.html</id>
    <published>2017-06-21T19:23:34.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章<a href="simple-captcha.html">生成简单的图形验证码（上）</a>中已经知道如何生成验证码，这节中我们来学习如何在HTML页面上展示验证码。<br>话不多说，撸代码：<br><a id="more"></a><br>首先尝试使用jquery的ajax:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    url:<span class="string">'http://localhost:8080/captcha'</span>,</div><div class="line">    type:<span class="string">'get'</span>,</div><div class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(img);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>控制台将会打印一串乱码，因为ajax并没有解析img的dataType(大家可以尝试换几种dataType来请求)</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><p>既然在response中设置了返回的类型为<em>image/jpeg</em>，那么将请求验证码的链接作为img的src肯定是没有问题的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;http://localhost:8080/captcha&quot; /&gt;</div></pre></td></tr></table></figure><p>成功输出验证码，那么问题来了:浏览器本身是会缓存图片的，img的使用相同的src很大概率会被缓存下来，解决办法就是在链接后面加上随机的参数，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/captcha"</span> <span class="attr">id</span>=<span class="string">"captcha"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"getCaptcha()"</span>&gt;</span>看不清，换一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getCaptcha</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'captcha'</span>).src =   <span class="string">'http://localhost:8080/captcha?ver='</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><p>使用XMLHttpRequest,使用这个请求将responseType设置为blob(即返回类型为文件)，然后获取Blob的url,赋值给img<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCaptcha</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    XMLHttpRequest xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.open(<span class="string">'get'</span>, <span class="string">'http://localhost:8080/captcha'</span>, <span class="literal">true</span>);</div><div class="line">    xhr.responseType = <span class="string">'blob'</span>;</div><div class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</div><div class="line">            <span class="keyword">var</span> resp = <span class="keyword">this</span>.response;</div><div class="line">           <span class="built_in">document</span>.getElementById(<span class="string">'captcha'</span>).src = <span class="built_in">window</span>.URL.createObjectURL(resp);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://segmentfault.com/q/1010000000443286" target="_blank" rel="external">ajax请求并处理二进制流(图片)</a></p><p><a href="http://www.zhangxinxu.com/wordpress/2013/10/understand-domstring-document-formdata-blob-file-arraybuffer/" target="_blank" rel="external">理解DOMString、Document、FormData、Blob、File、ArrayBuffer数据类型</a></p><p><a href="http://blog.csdn.net/chenghui0317/article/details/12526439" target="_blank" rel="external">java web项目生成验证码的解决方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章&lt;a href=&quot;simple-captcha.html&quot;&gt;生成简单的图形验证码（上）&lt;/a&gt;中已经知道如何生成验证码，这节中我们来学习如何在HTML页面上展示验证码。&lt;br&gt;话不多说，撸代码：&lt;br&gt;
    
    </summary>
    
      <category term="java &amp; javascript" scheme="http://www.leesj.com/categories/java-javascript/"/>
    
    
      <category term="javascript" scheme="http://www.leesj.com/tags/javascript/"/>
    
      <category term="ajax" scheme="http://www.leesj.com/tags/ajax/"/>
    
      <category term="blob" scheme="http://www.leesj.com/tags/blob/"/>
    
      <category term="xhr" scheme="http://www.leesj.com/tags/xhr/"/>
    
      <category term="XMLHttpRequest" scheme="http://www.leesj.com/tags/XMLHttpRequest/"/>
    
      <category term="验证码" scheme="http://www.leesj.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>JAVA生成简单的图形验证码（上）-- 生成验证码图片</title>
    <link href="http://www.leesj.com/archives/simple-captcha.html"/>
    <id>http://www.leesj.com/archives/simple-captcha.html</id>
    <published>2017-06-21T19:21:36.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA生成简单的图形验证码（上）– 生成验证码图片</p><p>没啥可说的直接上代码了<br><a id="more"></a><br>说明：CaptchaConfig.java这个类是非必须的，其中的配置可以在核心类中写成固定的值</p><h3 id="CaptchaConfig-java-图形的配置"><a href="#CaptchaConfig-java-图形的配置" class="headerlink" title="CaptchaConfig.java ( 图形的配置)"></a>CaptchaConfig.java ( 图形的配置)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaptchaConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width = <span class="number">120</span>;    <span class="comment">// 图片的宽度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height = <span class="number">36</span>;    <span class="comment">// 图片的高度</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">4</span>;     <span class="comment">// 验证码长度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fontSize = <span class="number">20</span>;  <span class="comment">// 验证码的字体大小</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CaptchaConfig <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DEFAULT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ....</span></div><div class="line">    <span class="comment">// Getter/Setter省略</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPTCHA_CONFIG_PATH = <span class="string">"/captcha.properties"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CaptchaConfig DEFAULT = <span class="keyword">new</span> CaptchaConfig();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 读取验证码的配置（可要可不要）</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            properties.load(CaptchaConfig.class.getResourceAsStream(CAPTCHA_CONFIG_PATH));</div><div class="line">            String h = properties.getProperty(<span class="string">"height"</span>);</div><div class="line">            String w = properties.getProperty(<span class="string">"width"</span>);</div><div class="line">            String l = properties.getProperty(<span class="string">"length"</span>);</div><div class="line">            String fs = properties.getProperty(<span class="string">"font_size"</span>);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(h)) &#123;</div><div class="line">                DEFAULT.height = Integer.parseInt(h);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(w)) &#123;</div><div class="line">                DEFAULT.width = Integer.parseInt(w);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(l)) &#123;</div><div class="line">                DEFAULT.length = Integer.parseInt(l);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(fs)) &#123;</div><div class="line">                DEFAULT.fontSize = Integer.parseInt(fs);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ImageCaptcha-java-生成验证码的核心类"><a href="#ImageCaptcha-java-生成验证码的核心类" class="headerlink" title="ImageCaptcha.java(生成验证码的核心类)"></a>ImageCaptcha.java(生成验证码的核心类)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCaptcha</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 显示的字符（为了识别方便，去掉了0和o)</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] chars = &#123;</div><div class="line">            <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span></div><div class="line">            , <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] value;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CaptchaConfig config;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startX, startY;     <span class="comment">// 字符起始的位置</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> BufferedImage image;    <span class="comment">// 生成的验证码图片对象</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> created = <span class="keyword">false</span>;    <span class="comment">// 标识验证码是否已经创建</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCaptcha</span><span class="params">(CaptchaConfig config)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.config = config;</div><div class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[config.getLength()];</div><div class="line">        startX = config.getWidth() / (config.getLength() + <span class="number">2</span>);    <span class="comment">// 每个字的间隔一样</span></div><div class="line">        startY = config.getHeight() - (config.getHeight() - config.getFontSize()) / <span class="number">2</span>;   <span class="comment">// 垂直居中</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建验证码</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建图片对象</span></div><div class="line">        image = <span class="keyword">new</span> BufferedImage(config.getWidth(), config.getHeight(), BufferedImage.TYPE_INT_RGB);</div><div class="line">        <span class="comment">// 创建画笔</span></div><div class="line">        Graphics2D graphics2D = image.createGraphics();</div><div class="line">        <span class="comment">// 设置背景颜色</span></div><div class="line">        graphics2D.setColor(Color.lightGray);</div><div class="line">        Font font = <span class="keyword">new</span> Font(Font.SANS_SERIF, Font.PLAIN, config.getFontSize());</div><div class="line">        <span class="comment">// 设置字体</span></div><div class="line">        graphics2D.setFont(font);</div><div class="line">        <span class="comment">// 填充矩形</span></div><div class="line">        graphics2D.fillRect(<span class="number">0</span>, <span class="number">0</span>, config.getWidth(), config.getHeight());</div><div class="line">        <span class="comment">// 绘制干扰线</span></div><div class="line">        graphics2D.setColor(Color.black);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> offsetX = random.nextInt(<span class="number">12</span>), offsetY = random.nextInt(<span class="number">12</span>);   <span class="comment">// 干扰线偏移量</span></div><div class="line">            <span class="keyword">int</span> x = random.nextInt(config.getWidth());</div><div class="line">            <span class="keyword">int</span> y = random.nextInt(config.getHeight());</div><div class="line">            graphics2D.drawLine(x, y, x + offsetX, y + offsetY);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 绘制验证码</span></div><div class="line">        <span class="keyword">int</span> r, g, b;        <span class="comment">// RGB色值，随机的颜色</span></div><div class="line">        String temp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; config.getLength(); i++) &#123;</div><div class="line">            <span class="keyword">char</span> c = randomChar();</div><div class="line">            value[i] = c;</div><div class="line">            temp = String.valueOf(c);</div><div class="line">            r = random.nextInt(<span class="number">255</span>);</div><div class="line">            g = random.nextInt(<span class="number">255</span>);</div><div class="line">            b = random.nextInt(<span class="number">255</span>);</div><div class="line">            graphics2D.setColor(<span class="keyword">new</span> Color(r, g, b));</div><div class="line">            graphics2D.drawString(temp, (i + <span class="number">1</span>) * startX, startY);</div><div class="line">        &#125;</div><div class="line">        created = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 得到图片的字节流</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getImageData() <span class="keyword">throws</span> IOException &#123;</div><div class="line">        checkState();</div><div class="line">        ByteArrayOutputStream out = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            out = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            writeTo(out);</div><div class="line">            <span class="keyword">return</span> out.toByteArray();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">                out.flush();</div><div class="line">                out.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将图片输出到输出流上</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream 输出流对象</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 写入图片出错时</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(OutputStream outputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (outputStream == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"输出对象不能为空"</span>);</div><div class="line">        &#125;</div><div class="line">        checkState();</div><div class="line">        ImageIO.write(image, <span class="string">"jpeg"</span>, outputStream);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 生成随机的字符</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> chars中的字符</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">randomChar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> chars[random.nextInt(<span class="number">33</span>)];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BufferedImage <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        checkState();</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCaptchaString</span><span class="params">()</span> </span>&#123;</div><div class="line">        checkState();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 检查验证码是否已经创建</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!created) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"验证码未创建,请先调用create方法"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在初始化startY时,还是没搞明白坐标轴是设置的，希望好心人士告知！！！</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCaptchaTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateCaptchaTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        CaptchaConfig captchaConfig = CaptchaConfig.getDefault();</div><div class="line">        ImageCaptcha captcha = <span class="keyword">new</span> ImageCaptcha(captchaConfig);</div><div class="line">        captcha.create();</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"F:/java/captchaTest.jpg"</span>);</div><div class="line">        <span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">            file.delete();</div><div class="line">        &#125;</div><div class="line">        file.createNewFile();</div><div class="line">        FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">        System.out.println(captcha.getCaptchaString());</div><div class="line">        captcha.writeTo(outputStream);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://blog.csdn.net/chenghui0317/article/details/12526439" target="_blank" rel="external">java web项目生成验证码的解决方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA生成简单的图形验证码（上）– 生成验证码图片&lt;/p&gt;
&lt;p&gt;没啥可说的直接上代码了&lt;br&gt;
    
    </summary>
    
      <category term="java &amp; javascript" scheme="http://www.leesj.com/categories/java-javascript/"/>
    
    
      <category term="验证码" scheme="http://www.leesj.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
      <category term="captcha" scheme="http://www.leesj.com/tags/captcha/"/>
    
      <category term="java" scheme="http://www.leesj.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springMVC参数类型转换</title>
    <link href="http://www.leesj.com/archives/spring-type-converter.html"/>
    <id>http://www.leesj.com/archives/spring-type-converter.html</id>
    <published>2017-06-21T19:16:33.000Z</published>
    <updated>2017-10-25T05:03:50.491Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用SpringMVC的时候碰到如下问题，故记录下来</p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>在Controller的方法中接受一个BigDecimal的参数，在JS传一个小数过来时，js端收到的返回码为<a href="http://baike.baidu.com/link?url=JZwlb1NADJQ22oGk4bAYCKurRFfMiBQIoJQRz42yOQpb4tpWjnjDXDOZbJVbi-WRPW2r6_m2mCLYGeHCF-G7Cq" target="_blank" rel="external">400(Bad Request)</a><br><a id="more"></a></p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>使用SpringMVC提供的<strong>ServletRequestDataBinder</strong>和<strong>@initBinder</strong>注解<br>在@InitBinder的注解的源码中有如下注释：</p><blockquote><p>Annotation that identifies methods which initialize the<br> {@link org.springframework.web.bind.WebDataBinder} which<br> will be used for populating command and form object arguments of annotated handler methods.</p></blockquote><p>大致的意思是<strong>标识初始化WebDataBinder的方法的注解，其中将用于填充命令和表单对象参数的注释处理程序方法。</strong> ServletRequestDataBinder继承于WebDataBinder，其中<strong>registerCustomEditor</strong>方法用于注册自定义的转换器，转换器的类型为<strong>PropertyEditor</strong>接口，<strong>PropertyEditorSupport</strong>已经实现了该接口，我们只需要复写其中的<strong>setAsText</strong>方法，然后调用<strong>setValue</strong>方法将转换过得值赋给需要的变量。</p><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><h3 id="BigDecimalEditor-java"><a href="#BigDecimalEditor-java" class="headerlink" title="BigDecimalEditor.java"></a>BigDecimalEditor.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.beans.PropertyEditorSupport;</div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(text)) &#123;</div><div class="line">            setValue(<span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">double</span> temp = Double.parseDouble(text);</div><div class="line">                setValue(BigDecimal.valueOf(temp));</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="XXXController-java"><a href="#XXXController-java" class="headerlink" title="XXXController.java"></a>XXXController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXController</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/path"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(BigDecimal someVar)</span></span>&#123;</div><div class="line">        System.out.println(someVar);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@InitBinder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWebBinder</span><span class="params">(ServletRequestDataBinder binder)</span> </span>&#123;</div><div class="line">        binder.registerCustomEditor(BigDecimal.class, <span class="keyword">new</span> BigDecimalEditor());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如需要转换其他类型，与上述方法类似</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用SpringMVC的时候碰到如下问题，故记录下来&lt;/p&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;在Controller的方法中接受一个BigDecimal的参数，在JS传一个小数过来时，js端收到的返回码为&lt;a href=&quot;http://baike.baidu.com/link?url=JZwlb1NADJQ22oGk4bAYCKurRFfMiBQIoJQRz42yOQpb4tpWjnjDXDOZbJVbi-WRPW2r6_m2mCLYGeHCF-G7Cq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;400(Bad Request)&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leesj.com/categories/java/"/>
    
    
      <category term="spring" scheme="http://www.leesj.com/tags/spring/"/>
    
      <category term="java" scheme="http://www.leesj.com/tags/java/"/>
    
      <category term="springMVC" scheme="http://www.leesj.com/tags/springMVC/"/>
    
      <category term="类型转换" scheme="http://www.leesj.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Spring使用quartz配置定时器</title>
    <link href="http://www.leesj.com/archives/spring-quartz.html"/>
    <id>http://www.leesj.com/archives/spring-quartz.html</id>
    <published>2017-06-21T18:27:48.000Z</published>
    <updated>2017-10-25T05:03:50.491Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.quartz-scheduler.org/" target="_blank" rel="external">quartz</a>是一个强大的开源作业调度框架，支持分布式，这篇文章教会大家如何在spring中配置定时器（分布式配置请移步<a href="http://www.tuicool.com/articles/B3qeUrB" target="_blank" rel="external">http://www.tuicool.com/articles/B3qeUrB</a>）。<br><a id="more"></a></p><h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><p>引入quartz的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="Spring中的配置"><a href="#Spring中的配置" class="headerlink" title="Spring中的配置"></a>Spring中的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 任务bean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskObj"</span> <span class="attr">class</span>=<span class="string">"com.example.TaskObj"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 任务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jobDetail"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"taskObj"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"taskMethod"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 任务触发器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskTrigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"jobDetail"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"startDelay"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0 0 0/1 * * ?"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 任务调度工厂 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"timerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"taskTrigger"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>配置说明</p><p>taskObj:    任务所在的实体<br>#<br>jobDetail： 交由quartz管理的任务</p><p>– targetObject:参见taskObj<br>– targetMethod:定时器启动时执行的方法<br>#</p><p>taskTrigger：任务触发器</p><p>– jobDetail:任务<br>– startDelay：延时多少时间执行，默认为0<br>– cronExpression：任务调度的时间表达式，关于这个表达式的格式可参见<a href="http://www.cnblogs.com/yaowen/p/3779284.html" target="_blank" rel="external">http://www.cnblogs.com/yaowen/p/3779284.html</a>,若是不理解可以偷懒：<a href="http://cron.qqe2.com/" target="_blank" rel="external">在线生成cronExpression</a>。(建议理解后自己写)</p><p>timerFactory：任务调度工厂</p><p>配置完成，赶快去试下效果吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.quartz-scheduler.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;quartz&lt;/a&gt;是一个强大的开源作业调度框架，支持分布式，这篇文章教会大家如何在spring中配置定时器（分布式配置请移步&lt;a href=&quot;http://www.tuicool.com/articles/B3qeUrB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.tuicool.com/articles/B3qeUrB&lt;/a&gt;）。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leesj.com/categories/java/"/>
    
    
      <category term="spring" scheme="http://www.leesj.com/tags/spring/"/>
    
      <category term="quartz" scheme="http://www.leesj.com/tags/quartz/"/>
    
      <category term="定时器" scheme="http://www.leesj.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>解决：SpringMVC使用拦截器后ajax无法获取返回的数据</title>
    <link href="http://www.leesj.com/archives/ajax-response-body.html"/>
    <id>http://www.leesj.com/archives/ajax-response-body.html</id>
    <published>2017-06-21T18:18:24.000Z</published>
    <updated>2017-10-25T05:03:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用SpringMVC时碰到如标题所说的问题，具体原因还未找到，解决办法是采用动态代理的方法（AspectJ），就是常说的AOP，思路来自于<a href="http://www.iteye.com/problems/87048" target="_blank" rel="external">http://www.iteye.com/problems/87048</a>中的第一个答案。<br><a id="more"></a><br>解决方法：将拦截器配置为一个动态代理的类,代理@ResponseBody注解的控制器中的方法</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*AspectJ动态代理的注解*/</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,HttpServletResponse response,Object handler)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">// 验证</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... 其他实现的方法，这里暂时不需要</span></div><div class="line"></div><div class="line">    <span class="comment">// 设置切面</span></div><div class="line">    <span class="meta">@Pointcut</span>(value = <span class="string">"@annotation(org.springframework.web.bind.annotation.ResponseBody)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 引用配置的切面，注意要有返回值</span></div><div class="line">    <span class="meta">@Around</span>(value = <span class="string">"pointCut()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint point)</span> </span>&#123;</div><div class="line">        Object result;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = point.proceed();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="comment">// 异常处理，也可返回result</span></div><div class="line">            result = ....</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启自动代理 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aspect"</span> <span class="attr">class</span>=<span class="string">"上面的拦截器的类"</span> /&gt;</span></div></pre></td></tr></table></figure><p>注意：<strong>若Spring主配置文件和SpringMVC的配置文件不在一起，则两个文件都需要配置aspectj的自动代理</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用SpringMVC时碰到如标题所说的问题，具体原因还未找到，解决办法是采用动态代理的方法（AspectJ），就是常说的AOP，思路来自于&lt;a href=&quot;http://www.iteye.com/problems/87048&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.iteye.com/problems/87048&lt;/a&gt;中的第一个答案。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.leesj.com/categories/java/"/>
    
    
      <category term="spring" scheme="http://www.leesj.com/tags/spring/"/>
    
      <category term="ResponseBody" scheme="http://www.leesj.com/tags/ResponseBody/"/>
    
      <category term="spring拦截器" scheme="http://www.leesj.com/tags/spring%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
</feed>
